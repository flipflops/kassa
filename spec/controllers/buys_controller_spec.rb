require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BuysController do
  before :each do
    @user = FactoryGirl.create :user
    sign_in :user, @user
  end

  describe "GET index" do
    it "assigns latest 20 buys as @buys" do
      buy = FactoryGirl.create :buy
      buys = [0..20].collect{|num| FactoryGirl.create(:buy)}
      get :index, {}, :format => :json
      assigns(:buys).should eq(buys)
      assigns(:buys).should_not include(buy)
    end
    it "assigns latest 20 buys as @buys from offset of 5" do
      buy = FactoryGirl.create :buy
      selected_buys = [0..20].collect{|num| FactoryGirl.create(:buy)}
      buys = [0..5].collect{|num| FactoryGirl.create(:buy)}
      get :index, {:offset => 5}, :format => :json
      assigns(:buys).should eq(selected_buys)
      assigns(:buys).should_not include(buys)
    end
    it "assigns latest 10 buys as @buys when given a limit of 10" do
      not_selected = [0..10].collect{|num| FactoryGirl.create(:buy)}
      buys = [0..10].collect{|num| FactoryGirl.create(:buy)}
      get :index, {:limit => 10}, :format => :json
      assigns(:buys).should eq(buys)
      assigns(:buys).should_not include(not_selected)
    end
  end

  describe "GET show" do
    it "assigns the requested buy as @buy" do
      buy = Buy.create! valid_attributes
      get :show, {:id => buy.to_param}, :format => :json
      assigns(:buy).should eq(buy)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Buy" do
        expect {
          post :create, {:buy => valid_attributes}, :format => :json
        }.to change(Buy, :count).by(1)
      end

      it "assigns a newly created buy as @buy" do
        post :create, {:buy => valid_attributes}, :format => :json
        assigns(:buy).should be_a(Buy)
        assigns(:buy).should be_persisted
      end

      it "returns the newly created buy as json" do
        post :create, {:buy => valid_attributes}, :format => :json
        response.should == Buy.last.to_json
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved buy as @buy" do
        # Trigger the behavior that occurs when invalid params are submitted
        Buy.any_instance.stub(:save).and_return(false)
        post :create, {:buy => {}}
        assigns(:buy).should be_a_new(Buy)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Buy.any_instance.stub(:save).and_return(false)
        post :create, {:buy => {}}
        response.should render_template("new")
      end
    end
  end

end
