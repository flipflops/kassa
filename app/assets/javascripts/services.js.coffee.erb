<% url_helper = Kassa::Application.routes.url_helpers %>
<% environment.context_class.instance_eval { include ActionView::Helpers::JavaScriptHelper } %>
class Materials
  constructor: ($resource)->
    actions =
      index:
        method: 'GET',
        isArray: true
      create:
        method: 'POST'
      update:
        method: 'PUT'
      destroy:
        method: 'DELETE'
    @$resource = $resource '<%= url_helper.material_path(':id') %>', {id: '@id'}, actions
    @localized_units = {}
    @localized_units[unit] = I18n.t("materials.units.#{unit}") for unit in angular.fromJson('<%= escape_javascript Material.units.to_json %>')
    @localized_groups = {}
    @localized_groups[group] = I18n.t("materials.groups.#{group}") for group in angular.fromJson('<%= escape_javascript Material.groups.to_json %>')
    @$resource.index {}, @_handleCollectionSuccess, @_handleCollectionFailure


  update: ()=>
    if @editing
      @$resource.update @selected, @_handleUpdateSuccess, @_handleUpdateFailure

  edit:(material)=>
    @selected= material
    @selected.editing = true

  isSelected: (material)=>
    if material then material == @selected else @selected != undefined

  cancel: =>
    @selected.editing = false if @selected
    @selected = undefined

  create: =>
    @$resource.create @selected, @_handleCreateSuccess, @_handleCreateFailure

  _handleCollectionSuccess: (response, responseHeaders)=>
    @collection = response

  _handleCollectionFailure: (response, responseHeaders)=>
    console.log response

  _handleUpdateSuccess: (response, responseHeaders)=>
    console.log response

  _handleUpdateFailure: (response, responseHeaders)=>
    console.log response

  _handleCreateSuccess: (response, responseHeaders)=>
    console.log response

  _handleCreateFailure: (response, responseHeaders)=>
    console.log response

class Products
  constructor: ($resource)->
    actions =
      index:
        method: 'GET',
        isArray: true
      create:
        method: 'POST'
      update:
        method: 'PUT'
      destroy:
        method: 'DELETE'
    @$resource = $resource '<%= url_helper.product_path(':id') %>', {id: '@id'}, actions
    @localized_units = {}
    @localized_units[unit] = I18n.t("products.units.#{unit}") for unit in angular.fromJson('<%= escape_javascript Product.units.to_json %>')
    @localized_groups = {}
    @localized_groups[group] = I18n.t("products.groups.#{group}") for group in angular.fromJson('<%= escape_javascript Product.groups.to_json %>')
    @$resource.index {}, @_handleCollectionSuccess, @_handleCollectionFailure

  select:(product)=>
    @selected= product

  unselect: =>
    @selected = undefined

  isSelected: (product)=>
    if product then product == @selected else @selected != undefined

  addEntry: (material_and_amount)=>
    @selected.materials.push material_and_amount
    @update()

  removeEntry: (index)=>
    @selected.materials[index].destroy = true
    @selected.materials[index].hidden = true
    @update()

  update: ()=>
    if @editing
      @$resource.update @toJSON, @_handleUpdateSuccess, @_handleUpdateFailure

  create: =>
    @$resource.create @toJSON, @_handleCreateSuccess, @_handleCreateFailure

  toJSON: ->
    product =
      id: @selected.id
      name: @selected.name
      description: @selected.description
      unit: @selected.unit
      group: @selected.group
      materials_attributes: []

    for entry in @selected.materials
      entry.amount = 1 if entry.amount < 1
      product.materials_attributes.push {id: entry.id, amount: entry.amount, material_id: entry.material.id, _destroy: entry.destroy}
    product

  _handleCollectionSuccess: (response, responseHeaders)=>
    @collection = response

  _handleCollectionFailure: (response, responseHeaders)=>
    console.log "Products collection loading failed"
    console.log response

  _handleUpdateSuccess: (response, responseHeaders)=>
    console.log response

  _handleUpdateFailure: (response, responseHeaders)=>
    console.log response

  _handleCreateSuccess: (response, responseHeaders)=>
    console.log response

  _handleCreateFailure: (response, responseHeaders)=>
    console.log response

class Basket
  constructor: (@Buys)->
    @products = []

  addProduct: (product)=>
    unless @_incrementIfAlreadyInBasket(product)
      @products.push {product: product, amount: 1, error: ''}

  removeProduct: (index) =>
    @products.splice(index, 1)

  incrementAmount: (index) =>
    @products[index].amount += 1

  decrementAmount: (index) =>
    unless @products[index].amount == 1
      @products[index].amount -= 1

  clearProducts: =>
    @products.length = 0

  clearBuyer: =>
    @buyer = undefined

  clear: =>
    @clearBuyer()
    @clearProducts()

  canBuy: =>
    @buyer and @products.length

  buy: (success, failure) =>
    handleBuySuccess = (response, headers) =>
      @_performClientSideBuy()
      success(response,headers) if success

    handleBuyError = (response,headers)=>
      if response.status == 422
        @_addErrorsToProducts(response.data.errors)
      failure(response, headers) if failure
    @Buys.create @toJSON(), handleBuySuccess, handleBuyError

  indexOfProduct: (product)=>
    return -1 unless @products.length
    for index in [0..@products.length-1]
      if @products[index].product.name == product.name
        return index
    return -1

  toJSON: ()=>
    obj = {buyer_id: @buyer.id, products_attributes: []}
    for entry in @products
      obj.products_attributes.push {product_id: entry.product.id, amount: entry.amount}
    obj

  _incrementIfAlreadyInBasket: (product) =>
    index = @indexOfProduct(product)
    @incrementAmount(index) if index != -1
    index != -1

  _performClientSideBuy: =>
    price = 0.0
    product_count = 0
    for entry in @products
      entry.product.stock -= entry.amount
      price += entry.product.price * entry.amount
      product_count += entry.amount
    @buyer.balance -= price
    @buyer.buy_count += product_count
    @clearProducts()
    @clearBuyer()
    return

  _addErrorsToProducts: (errors)=>
    for entry in @products
      product_errors = errors[entry.product.name]
      if angular.isArray(product_errors)
        entry.error = product_errors.join(', ')
      else
        entry.error = product_errors

kassaModule = angular.module 'Kassa.services', ['ngResource']

kassaModule.factory 'Basket', (Buys)->
  new Basket(Buys)

kassaModule.factory 'Buys', ($resource)->
  actions =
    index:
      method: 'GET',
      isArray: true
    create:
      method: 'POST'
  $resource '<%= url_helper.buys_path %>', {}, actions

kassaModule.factory 'Products', ($resource)->
  new Products($resource)

kassaModule.factory 'Materials', ($resource)->
  new Materials($resource)

kassaModule.factory 'Users', ($resource)->
  actions =
    index:
      method: 'GET',
      isArray: true
    create:
      method: 'POST'
    update:
      method: 'PUT'
    destroy:
      method: 'DELETE'
  $resource '<%= url_helper.user_path(':id') %>', {id: '@id'}, actions