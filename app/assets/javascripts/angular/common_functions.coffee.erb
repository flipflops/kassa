angular.module('Kassa.common', []).run(['$rootScope', '$timeout', ($rootScope, $timeout)->
  #Bind the internationalization libabry to rootScope
  #I18n exposes rails internationalizations to JavaScript using gem 'i18n-js'
  $rootScope.I18n = I18n

  #simple sorting function by a field name
  $rootScope.sort = (array, field)->
    sortedAscendingByField = (array, field)->
      f = s = array[0]
      for i in [1..array.length-1]
        f = s
        s = array[i]
        return false if f[field] > s[field]
      return true
    return if array.length is 1
    if sortedAscendingByField(array, field)
      array.reverse()
    else
      array.sort (first, second)->
        if first[field] == second[field]
          0
        else
          if first[field] < second[field] then -1 else 1

  #filter arrays by some string property, allowing multiple match keys via filterList
  # @param items An array of items to filter
  # @param field A dot notated field name (ie. items.subitem), does not allow inner arrays (multiple outcomes)
  # @param filterList A list of keys that'll matched. An item is considered to match if its field contains any of the keys
  $rootScope.filter= (items, field, filterList)=>
    #Does not allow for arrays as item
    _findInnermostValue = (item, fieldNames, filterList) ->
      if fieldNames.length > 1
        _findInnermostValue(item[fieldNames.shift()], fieldNames, filterList)
      else
        return item[fieldNames]

    _containsStringInList= (haystack, needleList) ->
      for needle in needleList
        return true if _containsString(haystack, needle)
      return if needleList.length then false else true

    _containsString= (haystack, needle)->
      haystack.toLowerCase().indexOf(needle.toLowerCase()) > -1

    #allow for dot notated inner properties ie. 'material.name'
    fieldNames = field.split('.')
    if angular.isArray items
      for item in items
        value = _findInnermostValue(item,fieldNames,filterList)
        item.hidden = !_containsStringInList(value, filterList) if value
    else
      value = _findInnermostValue(items,fieldNames,filterList)
      items.hidden = !_containsStringInList(value, filterList) if value

  #notifications should be structured as objects with the following properties
  # name: The key under which the notification will be added
  # notification: The notification text
  # type: A string value indicating the notification type
  $rootScope.showNotification = (notification)->
    removeNotification = (notif)->
      $rootScope.notifications[notif.name].splice(0,1)

    if angular.isUndefined($rootScope.notifications)
      $rootScope.notifications[notification.name] = []

    $rootScope.notifications[notification.name].push notification

    #remove the notification after 5 seconds
    $timeout removeNotification(notification), 5000

])