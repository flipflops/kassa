<% url_helper = Kassa::Application.routes.url_helpers %>

kassaModule = angular.module 'Kassa.controllers', ['Kassa.services']
class NavigationCtrl
  constructor: (@$scope, @location)->

    @$scope.goToHome= ()=>
      @location.path '/'

    @$scope.goToProductManagement= ()=>
      @location.path '<%= url_helper.products_path %>'

    @$scope.goToUserManagement= ()=>
      @location.path '<%= url_helper.users_path %>'

    @$scope.canManageProducts= ()=>
      true   #TODO handle based on logged in user

    @$scope.canManageUsers= ()=>
      true   #TODO handle based on logged in user

NavigationCtrl.$inject = ['$scope', '$location']
kassaModule.controller 'NavigationCtrl', NavigationCtrl
class AbstractKassaController
  constructor: (@$scope)->
    @$scope.filter= (items, field, filterList)=>
      for item in items
        item.hidden = !@_containsStringInList(item[field], filterList)

  _containsStringInList: (haystack, needleList) ->
    for needle in needleList
      return true if @_containsString(haystack, needle)
    return if needleList.length then false else true

  _containsString: (haystack, needle)->
    haystack.toLowerCase().indexOf(needle.toLowerCase()) > -1

  _i18nMessage: (response_data)=>
    I18n.t response_data.i18n_key, {defaultValue: response_data.message}

class BuysCtrl extends AbstractKassaController
  constructor: (@$scope, @Buys, @Basket) ->
    super @$scope
    @$scope.basket = @Basket
    @$scope.latest_buys = @Buys.index()
    @$scope.messageType = 'success'
    @$scope.message = ''

    @$scope.productsStr= (products)->
      str_arr = []
      for product in products
        str_arr.push "#{product.amount} #{product.name}"
      str_arr.join(', ')

    @$scope.buy= =>
      @Buys.create @$scope.basket.toJSON(), @_handleBuySuccess, @_handleBuyError

  _performClientSideBuy: =>
    price = 0.0
    product_count = 0
    for entry in @$scope.basket.products
      entry.product.stock -= entry.amount
      price += entry.product.price * entry.amount
      product_count += entry.amount
    @$scope.basket.buyer.balance -= price
    @$scope.basket.buyer.buy_count += product_count
    @$scope.basket.clearProducts()
    @$scope.basket.clearBuyer()
    return

  _handleBuySuccess: (response, headers) =>
    @_performClientSideBuy()
    @$scope.latest_buys = @Buys.index()
    @$scope.messageType = 'success'
    @$scope.message = @_i18nMessage response

  _handleBuyError: (response, headers) =>
    if response.status == 422
      @$scope.messageType = 'failure'
      @$scope.message = @_i18nMessage response.data
      for entry in @$scope.basket.products
        errors = response.data.errors[entry.product.name]
        if angular.isArray(errors)
          entry.error = errors.join(', ')
        else
          entry.error = errors

BuysCtrl.$inject = ['$scope','Buys', 'Basket']
kassaModule.controller 'BuysCtrl', BuysCtrl

class ProductsCtrl extends AbstractKassaController
  constructor: (@$scope, @Products, @Materials, @Basket)->
    super @$scope
    @$scope.basket = @Basket
    @$scope.products = @Products.index()
    @$scope.materials = @Materials.index()

ProductsCtrl.$inject = ['$scope','Products', 'Materials', 'Basket']
kassaModule.controller 'ProductsCtrl', ProductsCtrl

class UsersCtrl extends AbstractKassaController
  constructor: (@$scope, @Users, @Basket)->
    super @$scope
    @$scope.basket = @Basket
    @$scope.users = @Users.index()

UsersCtrl.$inject = ['$scope','Users', 'Basket']
kassaModule.controller 'UsersCtrl', UsersCtrl
