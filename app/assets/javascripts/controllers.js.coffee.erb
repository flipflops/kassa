<% url_helper = Kassa::Application.routes.url_helpers %>
<% environment.context_class.instance_eval { include ActionView::Helpers::JavaScriptHelper } %>

kassaModule = angular.module 'Kassa.controllers', ['Kassa.services']

class NavigationCtrl
  constructor: (@$scope, @location)->

    @$scope.goToHome= ()=>
      @location.path '/'

    @$scope.goToProductManagement= ()=>
      @location.path '<%= url_helper.products_path %>'

    @$scope.goToUserManagement= ()=>
      @location.path '<%= url_helper.users_path %>'

    @$scope.canManageProducts= ()=>
      true   #TODO handle based on logged in user

    @$scope.canManageUsers= ()=>
      true   #TODO handle based on logged in user

NavigationCtrl.$inject = ['$scope', '$location']
kassaModule.controller 'NavigationCtrl', NavigationCtrl

class AbstractKassaController
  constructor: (@$scope)->
    #filtering using inner arrays with dot notation is not enabled,
    #only single entities inside the dot notated string will work
    @$scope.filter= (items, field, filterList)=>
      fieldNames = field.split('.') #allow for dot notated inner properties ie. 'material.name'
      if angular.isArray items
        for item in items
          value = @_findInnermostValue(item,fieldNames,filterList)
          item.hidden = !@_containsStringInList(value, filterList) if value
      else
        value = @_findInnermostValue(items,fieldNames,filterList)
        items.hidden = !@_containsStringInList(value, filterList) if value

  #Does not allow for arrays as item
  _findInnermostValue: (item, fieldNames, filterList) ->
    if fieldNames.length > 1
      @_findInnermostValue(item[fieldNames.shift()], fieldNames, filterList)
    else
      return item[fieldNames]

  _containsStringInList: (haystack, needleList) ->
    for needle in needleList
      return true if @_containsString(haystack, needle)
    return if needleList.length then false else true

  _containsString: (haystack, needle)->
    haystack.toLowerCase().indexOf(needle.toLowerCase()) > -1

  _i18nMessage: (response_data)=>
    I18n.t response_data.i18n_key, {defaultValue: response_data.message}

class BuysCtrl extends AbstractKassaController
  constructor: (@$scope, @Buys, @Basket) ->
    super @$scope
    @$scope.basket = @Basket
    @$scope.latest_buys = @Buys.index()
    @$scope.messageType = 'success'
    @$scope.message = ''

    @$scope.productsStr= (products)->
      str_arr = []
      for product in products
        str_arr.push "#{product.amount} #{product.name}"
      str_arr.join(', ')

    @$scope.buy= =>
      @Basket.buy @_handleBuySuccess, @_handleBuyFailure

  _handleBuySuccess: (response, headers)=>
    @$scope.latest_buys = @Buys.index()
    @$scope.messageType = response.data.status
    @$scope.message = @_i18nMessage response

  _handleBuyFailure: (response,headers)=>
    if response.status == 422
      @$scope.messageType = response.data.status
      @$scope.message = @_i18nMessage response.data

BuysCtrl.$inject = ['$scope','Buys', 'Basket']
kassaModule.controller 'BuysCtrl', BuysCtrl

class ProductsCtrl extends AbstractKassaController
  constructor: (@$scope, @Products, @Materials, @Basket)->
    super @$scope
    @$scope.hidden = true
    @$scope.basket = @Basket
    @$scope.products = @Products
    @$scope.materials = @Materials

ProductsCtrl.$inject = ['$scope','Products', 'Materials', 'Basket']
kassaModule.controller 'ProductsCtrl', ProductsCtrl

class UsersCtrl extends AbstractKassaController
  constructor: (@$scope, @Users, @Basket)->
    super @$scope
    @$scope.basket = @Basket
    @$scope.users = @Users.index()

UsersCtrl.$inject = ['$scope','Users', 'Basket']
kassaModule.controller 'UsersCtrl', UsersCtrl
