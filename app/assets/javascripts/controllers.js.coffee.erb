<% url_helper = Kassa::Application.routes.url_helpers %>

kassaModule = angular.module 'Kassa.controllers', ['Kassa.services']
class NavigationCtrl
  constructor: (@scope, @location)->

    @scope.goToHome= ()=>
      @location.path '/'

    @scope.goToProductManagement= ()=>
      @location.path '<%= url_helper.products_path %>'

    @scope.goToUserManagement= ()=>
      @location.path '<%= url_helper.users_path %>'

    @scope.canManageProducts= ()=>
      true   #TODO handle based on logged in user

    @scope.canManageUsers= ()=>
      true   #TODO handle based on logged in user

NavigationCtrl.$inject = ['$scope', '$location']
kassaModule.controller 'NavigationCtrl', NavigationCtrl

class BuysCtrl
  constructor: (@scope, @Users, @Products, @Buys) ->
    @scope.users = @Users.index()
    @scope.products = @Products.index()
    @scope.basket = {}
    @scope.basket.products = []
    @scope.latest_buys = @Buys.index()

    @scope.filterProducts= (filterStr)=>
      for product in @scope.products
          product.hidden = !@_containsString(product.name, filterStr)

    @scope.filterUsers= (filterStr) =>
      for user in @scope.users
        user.hidden = !@_containsString(user.username, filterStr)

    @scope.selectBuyer= (buyer) =>
      @scope.basket.buyer = buyer

    @scope.addProductToBasket= (product) =>
      unless @_incrementIfAlreadyInBasket(product)
        entry =
          product: product,
          amount: 1
        @scope.basket.products.push entry

    @scope.removeFromBasket= (index) =>
      @scope.basket.products.splice(index, 1)

    @scope.buy= =>
      buy = @Buys.create @_basketToJSON(@scope.basket), (response)=>
        if response.status == 'created'
          @_performClientSideBuy()
          @scope.latest_buys = @Buys.index()
          alert('Osto onnistui!')
        else
          alert("Osto epÃ¤onnistui: #{response}")

    @scope.canBuy= =>
      @scope.basket.buyer and @scope.basket.products.length

    @scope.resetBuyer= =>
      @scope.basket.buyer = undefined

    @scope.incrementAmount= @_incrementAmount

    @scope.decrementAmount= @_decrementAmount

  _incrementIfAlreadyInBasket: (product) =>
    for entry in @scope.basket.products
      if entry.product.name == product.name
        @_incrementAmount(entry)
        return true
    return false

  _basketToJSON: (basket)->
    buy:
      buyer_id: basket.buyer.id
      buy_entries_attributes: @_productsHash(basket.products)

  _productsHash: (products) ->
    ret = []
    for entry in products
      ret.push {product_id: entry.product.id, amount: entry.amount}
    ret

  _performClientSideBuy: =>
    price = 0.0
    for entry in @scope.basket.products
      entry.product.stock -= entry.amount
      price += entry.product.price * entry.amount
    @scope.basket.buyer.balance -= price
    @scope.basket.buyer = undefined
    @scope.basket.products.length = 0

  _containsString: (haystack, needle)=>
    haystack.toLowerCase().indexOf(needle.toLowerCase()) > -1

  _incrementAmount: (entry) ->
    entry.amount += 1

  _decrementAmount: (entry) ->
    entry.amount -= 1 unless entry.amount is 1

BuysCtrl.$inject = ['$scope','Users', 'Products','Buys']
kassaModule.controller 'BuysCtrl', BuysCtrl

class ProductsCtrl
  constructor: (@scope, Products)->
    @scope.materials = []

    @scope.create= ()->

    @scope.addMaterial= (product) =>

ProductsCtrl.$inject = ['$scope','Products']
kassaModule.controller 'ProductsCtrl', ProductsCtrl
